1+3
log(100)
a <- 7
a
a = 8
a
A=8
A=9
pi
test = 9
test
test =a
rm(a)
a=TRUE
a =true
a= True
false & a
FALSE & a
a =F
A=T
a = c(1,4,3
a
a= c(1,2,3)
a= c("a","b",4)
a= c(3,5,"a")
a
getwd()
options()
a= c(1,3,6,7,1)
sum(a)
cumsum(a)
a*2
a+b
a+b
a=6
b=4
a+b
a=6
b=4
a+b
x= 1:12
a=6
b=4
a+b
x= 1:12
y= x^2
plot(x,y)
a=6
b=4
a+b
x= 1:12
y= x^2
plot(x,y)
plot(y,y)
7%/%3
7%%3
max(c(8, 9, 12, 24, 7, 19, 62, 54))
install.packages("ggplot2")
install.packages(c("cluster", "knitr", "MASS", "Matrix", "mgcv", "nlme", "survival", "xfun"))
install.packages("plotly")
install.packages("readr")
library(readr)
#Quellen: https://www.youtube.com/watch?v=_V8eKsto3Ug
#prozent anzeigen: https://stackoverflow.com/questions/3695497/show-percent-instead-of-counts-in-charts-of-categorical-variables
#prozent anzeigen2: https://stackoverflow.com/questions/40249943/adding-percentage-labels-to-a-bar-chart-in-ggplot2
#prozent in plot zeigen: https://sebastiansauer.github.io/percentage_plot_ggplot2_V2/
#Oskars Working Drive
setwd("C:/Users/Oskar/OneDrive/4 Semester HTW/Statistik/Hausuafagbe mit git/StatistikSoSe2022Gruppe13")
#Mauriz Working Drive
#setwd("G:/Meine Ablage/Sem 5/Statistik/TeamWork")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(pacman,tidyverse, scales,dplyr, plyr,knitr, gmodels,DescTools)
#WIchtig tabellen auf relativ, kreuztabelle, Bei alter gruppen machen(kinder, erwachsene,ältere) so 3/4 gruppen risikovergleich googlen,
#Daten aufbereitung
titanic_data <- data.table::fread("titanic_data.csv")
titanic_data <-  titanic_data %>% mutate(Age = replace(Age, Age>0 & Age<1, NA))#Statt Na 0?
titanic_data <- titanic_data %>%  transmute(
Survived =  factor(Survived,
levels = c(0,1),
labels = c("Died","Survived")
),
Class = factor(Pclass),
Sex = factor(Sex),
Age = as.integer(Age),
SibSp,
Parch,
Fare = round(Fare,2),
Cabin = substr( gsub("[^a-zA-Z]", "", Cabin), 1, 1),
Embarked = factor(Embarked,
levels = c("C","Q","S"),
labels = c("Cherbourg","Queenstown","Southampton"))
)
titanic_data[titanic_data == ""] <- NA
library(shiny); runApp('CopyOfShinyAppGruppe13-1.R')
runApp('CopyOfShinyAppGruppe13-1.R')
Subset_test<- subset(titanic_data%>%drop_na(), select = c(Age,SibSp,Parch,Fare))
korrelation <- cor(Subset_test, method = "spearman")
korrelation
Subset_test<- subset(titanic_data%>%drop_na(), select = c(Age,SibSp,Parch,Fare))
korrelation <- cor(Subset_test, method = "spearman")
korrelation
Subset_test<- subset(titanic_data%>%drop_na(), select = c(Age,SibSp,Parch,Fare,Survived))
korrelation <- cor(Subset_test, method = "spearman")
Subset_test<- subset(titanic_data%>%drop_na(), select = c(Age,SibSp,Parch,Fare,Class))
korrelation <- cor(Subset_test, method = "spearman")
korrelation
setwd("C:/Users/Oskar/OneDrive/4 Semester HTW/Statistik/Hausuafagbe mit git/StatistikSoSe2022Gruppe13")
#Mauriz Working Drive
#setwd("G:/Meine Ablage/Sem 5/Statistik/TeamWork")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(pacman,tidyverse, scales,dplyr, plyr,knitr, gmodels,DescTools)
#WIchtig tabellen auf relativ, kreuztabelle, Bei alter gruppen machen(kinder, erwachsene,ältere) so 3/4 gruppen risikovergleich googlen,
#Daten aufbereitung
titanic_data <- data.table::fread("titanic_data.csv")
titanic_data <-  titanic_data %>% mutate(Age = replace(Age, Age>0 & Age<1, NA))#Statt Na 0?
titanic_data <- titanic_data %>%  transmute(
Survived =  factor(Survived,
levels = c(0,1),
labels = c("Died","Survived")
),
Class = factor(Pclass),
Sex = factor(Sex),
Age = as.integer(Age),
SibSp,
Parch,
Fare = round(Fare,2),
Cabin = substr( gsub("[^a-zA-Z]", "", Cabin), 1, 1),
Embarked = factor(Embarked,
levels = c("C","Q","S"),
labels = c("Cherbourg","Queenstown","Southampton"))
)
titanic_data[titanic_data == ""] <- NA
mytable <- table(Survived,Sex,Class) # A will be rows, B will be columns
#Korelation Kategorialer Variablen
attach(titanic_data)
mytable <- table(Survived,Sex,Class) # A will be rows, B will be columns
ftable(mytable) # print table
mytable <- table(Survived,Sex,Class) # A will be rows, B will be columns
ftable(mytable) # print table
summary(mytable)
margin.table(mytable, 1) # A frequencies (summed over B)
margin.table(mytable, 2) # B frequencies (summed over A)
prop.table(mytable) # cell percentages
