# falsch --- rel_haeufikreit_1 <- round(betriebe[1:6,1:4]/betriebe[1:6,4:4],3)
rel_haeufikreit_1 <- round(betriebe/2130,3)
#relative Haeufigkeit 1
# falsch --- rel_haeufikreit_1 <- round(betriebe[1:6,1:4]/betriebe[1:6,4:4],3)
rel_haeufikreit_1 <- round(betriebe/2130)
#relative Haeufigkeit 1
# falsch --- rel_haeufikreit_1 <- round(betriebe[1:6,1:4]/betriebe[1:6,4:4],3)
rel_haeufikreit_1 <- round(betriebe/2130)
kable(rel_haeufikreit_1)
#relative Haeufigkeit 1
# falsch --- rel_haeufikreit_1 <- round(betriebe[1:6,1:4]/betriebe[1:6,4:4],3)
rel_haeufikreit_1 <- round(betriebe/2130,3)
kable(rel_haeufikreit_1)
#relative Haeufigkeit 1
rel_haeufikreit <- round(betriebe/2130,3)
kable(rel_haeufikreit)
#relative Haeufigkeit 1
betriebe
rel_haeufikreit
#relative Haeufigkeit 1
betriebe
rel_haeufikreit <- round(betriebe/2130,3)
rel_haeufikreit
noten <- read.csv("data/noten_mathematik_englisch.csv")
table(abiturnoten)
abiturnoten <- matrix(nrow=6,ncol=3,byrow=T,
dimnames=list(c(1,2,3,4,5,"Summe"),
c("Mathematik", "Englisch","Summe")))
table(abiturnoten)
addmargins(abiturnoten)
randverteiltung_abiturnoten <- addmargins(abiturnoten)
randverteiltung_abiturnoten
abiturnoten <- matrix(nrow=6,ncol=3,byrow=T,
dimnames=list(c(1,2,3,4,5,"Summe"),
c("Mathematik", "Englisch","Summe")))
randverteiltung_abiturnoten <- addmargins(abiturnoten)
randverteiltung_abiturnoten
table(noten)
kontigenztabelle_mit_randverteilung <- table(noten)
kontigenztabelle_mit_randverteilung
kable)kontigenztabelle_mit_randverteilung)
kontigenztabelle_mit_randverteilung <- table(noten)
kable(kontigenztabelle_mit_randverteilung)
kontigenztabelle_mit_randverteilung <- table(noten)
kable(kontigenztabelle_mit_randverteilung)
kable(addmargins(kontigenztabelle_mit_randverteilung))
addmargins(kontigenztabelle_mit_randverteilung)
#relative Haeufigkeit 1
betriebe
rel_haeufikreit <- round(betriebe/2130,6)
rel_haeufikreit
rel_haeufikreit <- round(betriebe/2130,3)
rel_haeufikreit
#kontingenztabelle mit absoluten häufigkeiten mit table() erstellen
kontigenztabelle_mit_randverteilung <- table(noten)
#kontingenztabelle mit absoluten häufigkeiten mit table() erstellen
kontigenztabelle_mit_randverteilung <- table(noten)
kontigenztabelle_mit_randverteilung
#addmargins fügt relative
addmargins(kontigenztabelle_mit_randverteilung)
kontigenztabelle_mit_randverteilung
#addmargins fügt relative
addmargins(kontigenztabelle_mit_randverteilung)
kontigenztabelle_mit_randverteilung
#addmargins fügt relative
addmargins(kontigenztabelle_mit_randverteilung)
kontigenztabelle_mit_abs_haeufigkeiten
#kontingenztabelle mit absoluten häufigkeiten mit table() erstellen
kontigenztabelle_mit_abs_haeufigkeiten <- table(noten)
kontigenztabelle_mit_abs_haeufigkeiten
#addmargins fügt
addmargins(kontigenztabelle_mit_randverteilung)
rel_abiturnoten_1 <- round(abiturnoten/70,3)
kable(rel_abiturnoten_1)
rel_abiturnoten_1 <- round(abiturnoten/70,3)
kable(rel_abiturnoten_1)
rel_abiturnoten <- round(kontigenztabelle_mit_abs_haeufigkeiten/70,3)
kable(rel_abiturnoten)
rel_abiturnoten <- round(kontigenztabelle_mit_randverteilung/70,3)
kable(rel_abiturnoten)
prop.table(kontigenztabelle_mit_randverteilung)
prop.table(kontigenztabelle_mit_abs_haeufigkeiten)
prop.table(kontigenztabelle_mit_abs_haeufigkeiten,3)
prop.table(kontigenztabelle_mit_abs_haeufigkeiten)
addmargins( prop.table(kontigenztabelle_mit_abs_haeufigkeiten))
rel_abiturnoten <- round(kontigenztabelle_mit_randverteilung/70,3)
addmargins( prop.table(kontigenztabelle_mit_abs_haeufigkeiten))
mosaicplot(kontigenztabelle_mit_abs_haeufigkeiten)
round(addmargins( prop.table(kontigenztabelle_mit_abs_haeufigkeiten)),3)
kable(rel_abiturnoten)
haeufigkeitstabelle[1,2] <- 3
haeufigkeitstabelle
ausschlag_mit_randsummen <- addmargins(ausschlag)
kable(ausschlag_mit_randsummen)
ausschlag_mit_randsummen
round(addmargins(prop.table(ausschlag)),3)
addmargins(ausschlag)
round(addmargins(prop.table(ausschlag)),3)
mosaicplot(ausschlag)
addmargins(ausschlag)
round(addmargins(prop.table(ausschlag)),3)
mosaicplot(ausschlag)
addmargins(ausschlag)
round(addmargins(prop.table(ausschlag)),3)
mosaicplot(ausschlag)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(knitr.kable.NA='') # zeige NAs als Leerzeichen
betriebe <- matrix(c(NA,64,41,NA,487,131,41,659,203,NA,NA,389,54,91,17,162,
46,112,18,176,1429,551,NA,NA),
nrow=6,ncol=4,byrow=T,
dimnames=list(c("[0,50)", "[50, 180)",
"[180, 500)", "[500, 1000)", ">= 1000", "Summe"),
c("Vollzeit", "Nebenerwerb", "Pacht", "Summe")))
kable(betriebe)
betriebe
betriebe[,1]
#Kalkulation Zelle1_1
Zelle1_1 <- betriebe[6,1] - sum(betriebe[2:5,1])
betriebe[1,1] <- Zelle1_1
#Kalkulation Randsumme Zeile 1
Randsumme_Zeile1 <- sum(betriebe[1,1:3])
betriebe[1,4] <- Randsumme_Zeile1
#Kalkulation Gesamtsumme
Gesamtsumme <- sum(betriebe[1:5,4])
betriebe[6,4] <- Gesamtsumme
#Kalkulation Randsumme Pacht
Randsumme_Pacht <- Gesamtsumme - sum(betriebe[6,1:2])
betriebe[6,3] <- Randsumme_Pacht
#Kalkulatuion Pacht Zeile 3
Zelle3_3 <- Randsumme_Pacht - (sum(betriebe[1:2,3]) + sum(betriebe[4:5,3]))
betriebe[3,3] <- Zelle3_3
#Kalkulatuion Nebenerwerb Zeile 3
Randsumme_Nebenerwerb <- betriebe[6,2]
Zelle2_3 <- Randsumme_Nebenerwerb - (sum(betriebe[1:2,2]) + sum(betriebe[4:5,2]))
betriebe[3,2] <- Zelle2_3
#zellen der Konvergenzmatrix
length(betriebe)
kable(betriebe)
#Betribe mit weniger als 50 Hekter Pacht == Randsumme Zeile 1
betriebe[1,4]
#Summe Pächter gefuehrter Betriebe == Zeilensumme Pacht
betriebe[6,3]
betriebe[4,2]
#Randsumme Nebenerwerb
betriebe[6,2]
sum(betriebe[3:5,3])
#relative Haeufigkeit 1
betriebe
rel_haeufikreit <- round(betriebe/2130,3)
rel_haeufikreit
noten <- read.csv("data/noten_mathematik_englisch.csv")
kable(head(noten))
#kontingenztabelle mit absoluten häufigkeiten mit table() erstellen
kontigenztabelle_mit_abs_haeufigkeiten <- table(noten)
kontigenztabelle_mit_abs_haeufigkeiten
#addmargins fügt randhäufigkeiten hinzu
addmargins(kontigenztabelle_mit_randverteilung)
rel_abiturnoten <- round(kontigenztabelle_mit_randverteilung/70,3)
round(addmargins( prop.table(kontigenztabelle_mit_abs_haeufigkeiten)),3)
kable(rel_abiturnoten)
mosaicplot(kontigenztabelle_mit_abs_haeufigkeiten)
haeufigkeitstabelle <- matrix(nrow=3,ncol=3,byrow=T,
dimnames=list(c("$y_1$","$y_2$","$sum$"),
c("$x_1$", "$x_2$","$sum$")))
haeufigkeitstabelle[1,2] <- 3
haeufigkeitstabelle
ausschlag <- matrix(c(223, 75, 107, 21), nrow=2, byrow=T,
dimnames=list(c("mit Salbe","ohne Salbe"), c("besser","schlimmer")))
kable(ausschlag)
addmargins(ausschlag)
round(addmargins(prop.table(ausschlag)),3)
mosaicplot(ausschlag)
prop.table(ausschlag,1)
addmargins prop.table(ausschlag,1))
addmargins8prop.table(ausschlag,1))
addmargins(prop.table(ausschlag,1))
addmargins(prop.table(ausschlag,1),2)
knitr::opts_chunk$set(echo = TRUE)
assocstats(betriebe_daten)
install.packages("vcd")
install.packages("DescTools")
knitr::opts_chunk$set(echo = TRUE)
assocstats(betriebe_daten)
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
install.packages("DescTools")
library(vcd)
library(DescTools)
library(vcd)
library(desctools)
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
---
output:
html_document: default
html_notebook: default
pdf_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Aufgabenblatt 8
## Statistik für Wirtschaftsinformatiker, Übung, HTW Berlin
### Martin Spott, Michael Heimann
Stand: `r format(Sys.Date(), format='%d.%m.%Y')`
## Wiederholung
Diese Fragen beziehen sich auf qualitative Merkmale
* Was bedeutet es, wenn zwei Merkmale *unabhängig* voneinander sind?
- man kann den wert eines Merkmals nicht aus dem Merkmalswert eines anderen vorhersagen
* Was sind die *erwarteten Häufigkeiten im Falle von Unabhängigkeit* und wie berechnet man sie?
- erwartete Häufigkeiten im fall von Unabhängigkeit ist das was messen würde wenn zwei werte unabhängig sind, randhäufigkeiten multipizieren geteilt durch die ...
* Wie kann man den Grad der Unabhängigkeit messen?
-
## Aufgabe 8.1
Wir benutzen die Daten von Aufgabe 7.1 (Aufgabenblatt 7):
```{r}
library(knitr)
betriebe_daten <- matrix(c(639,64,41,487,131,41,203,153,33,54,91,17,46,112,18),
nrow=5, ncol=3, byrow=T,
dimnames=list(c("[0,50)", "[50, 180)",
"[180, 500)", "[500, 1000)", ">= 1000"),
c("Vollzeit", "Nebenerwerb", "Pacht")))
kable(betriebe_daten)
```
a) Berechnen Sie Pearsons $\chi^2$-Statistik, den $\Phi$-Koeffizienten, das Kontingenzmaß C nach Pearson und das Kontingenzmaß V nach Cramer aus der Tabelle mit R. Benutzen Sie dazu die Funktion `assocstats()` der Bibliothek `vcd` oder die Funktionen `Phi()`, `ContCoef()` oder `CramerV()` der Bibliothek `DescTools`.
```{r}
library(vcd)
library(DescTools)
```
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
betriebe_daten <- matrix(c(639,64,41,487,131,41,203,153,33,54,91,17,46,112,18),
nrow=5, ncol=3, byrow=T,
dimnames=list(c("[0,50)", "[50, 180)",
"[180, 500)", "[500, 1000)", ">= 1000"),
c("Vollzeit", "Nebenerwerb", "Pacht")))
kable(betriebe_daten)
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
install.packages("vcd")
knitr::opts_chunk$set(echo = TRUE)
library(vcd)
library(DescTools)
---
output:
html_document: default
html_notebook: default
pdf_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Aufgabenblatt 8
## Statistik für Wirtschaftsinformatiker, Übung, HTW Berlin
### Martin Spott, Michael Heimann
Stand: `r format(Sys.Date(), format='%d.%m.%Y')`
## Wiederholung
Diese Fragen beziehen sich auf qualitative Merkmale
* Was bedeutet es, wenn zwei Merkmale *unabhängig* voneinander sind?
- man kann den wert eines Merkmals nicht aus dem Merkmalswert eines anderen vorhersagen
* Was sind die *erwarteten Häufigkeiten im Falle von Unabhängigkeit* und wie berechnet man sie?
- erwartete Häufigkeiten im fall von Unabhängigkeit ist das was messen würde wenn zwei werte unabhängig sind, randhäufigkeiten multipizieren geteilt durch die ...
* Wie kann man den Grad der Unabhängigkeit messen?
-
## Aufgabe 8.1
Wir benutzen die Daten von Aufgabe 7.1 (Aufgabenblatt 7):
```{r}
library(knitr)
betriebe_daten <- matrix(c(639,64,41,487,131,41,203,153,33,54,91,17,46,112,18),
nrow=5, ncol=3, byrow=T,
dimnames=list(c("[0,50)", "[50, 180)",
"[180, 500)", "[500, 1000)", ">= 1000"),
c("Vollzeit", "Nebenerwerb", "Pacht")))
kable(betriebe_daten)
a) Berechnen Sie Pearsons $\chi^2$-Statistik, den $\Phi$-Koeffizienten, das Kontingenzmaß C nach Pearson und das Kontingenzmaß V nach Cramer aus der Tabelle mit R. Benutzen Sie dazu die Funktion `assocstats()` der Bibliothek `vcd` oder die Funktionen `Phi()`, `ContCoef()` oder `CramerV()` der Bibliothek `DescTools`.
```{r}
library(vcd)
library(DescTools)
```
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
install.packages("lmom")
library(vcd)
library(DescTools)
library(vcd)
library(DescTools)
assocstats(betriebe_daten)
h <- table(betriebe_daten)
h
h <- table(betriebe_daten)
h
#awContingency <- table(applewood$Location, applewood$Vehicle.Type)
#awContingency
h <- table(betriebe_daten)*18
h
#awContingency <- table(applewood$Location, applewood$Vehicle.Type)
#awContingency
h <- table(betriebe_daten*18)
h
#awContingency <- table(applewood$Location, applewood$Vehicle.Type)
#awContingency
daten_mit_randsummern <- addmargins(daten)
daten <- matrix(c(223, 75, 107, 21), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten)
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
prop.table(daten_mit_randsummen)
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
prop.table(daten_mit_randsummen, marin = 2)
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
prop.table(daten_mit_randsummen, margin = 2)
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
prop.table(daten_mit_randsummen, margin = 2,2)
h <- table(betriebe_daten)
h
n <- 3
for(i in 0:n){
betriebe_daten()
}
daten_rand <- addmargins(betriebe_daten)
daten_rand
n <- 3
for(i in 0:n){
betriebe_daten()
}
daten_rand <- addmargins(betriebe_daten)
daten_rand
zeilen <- nrow(betriebe_daten)
spalten <- ncol(betriebe_daten)
n <- sum(betriebe_daten)
daten_rand_erwartet <- daten_rand
for(i in 1:zeilen){
for(j in 1:spalten){
daten_rand_erwartet[i,j] <- daten_rand_erwartet[zeilen+1,j]*daten_rand_erwartet[i, spalten+1]/n
}
}
daten_rand_erwartet
#awContingency <- table(applewood$Location, applewood$Vehicle.Type)
#awContingency
```{r}
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
prop.table(daten_mit_randsummen, margin = 2)
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
rount(prop.table(daten_mit_randsummen, margin = 2),2)
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
rount(prop.table(daten_mit_randsummen, margin = 2);2)
daten_mit_randsummen <- addmargins(daten)
n <- sum(daten)
daten_mit_randsummen
rount()
daten_mit_randsummen <- addmargins(daten)
n <- sum(daten)
n
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
n <- sum(daten)
n
daten_relativ <- daten/n
daten_relativ
daten_relativ <- addmargin(daten/n)
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
n <- sum(daten)
n
daten_relativ <- addmargins(daten/n)
daten_relativ
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
n <- sum(daten)
n
daten_relativ <- round(addmargins(daten/n),2)
daten_relativ
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
n <- daten[1][3]
n
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
n <- daten[1,3]
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
n <- daten[3,1]
daten_mit_randsummen <- addmargins(daten)
daten_mit_randsummen
n <- daten_mit_randsummen[3,1]
n
knitr::opts_chunk$set(echo = TRUE)
addmargins(prop.table(ausschlag,1),1)
#Oskars Working Drive
#setwd("C:/Users/Oskar/OneDrive/4 Semester HTW/Statistik/Hausaufagbe v2")
#Mauriz Working Drive
setwd("G:/Meine Ablage/Sem 5/Statistik/TeamWork")
data<-read.csv("titanic_data.csv")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(pacman,tidyverse, scales)
#Daten aufbereitung
data <-  data %>% mutate(Age = replace(Age, Age>0 & Age<1, NA))#Statt Na 0?
data$Age <- as.integer(data$Age)
data$Survived <- factor(data$Survived,
levels = c(0,1),
labels = c("Died","Survived"))
data$Pclass <- factor(data$Pclass)
data$Sex<- factor(data$Sex)
data$Embarked <- factor(data$Embarked,
levels = c("C","Q","S"),
labels = c("Cherbourg","Queenstown","Southampton"))
#Survival rate
ggplot(data, aes(x = Survived)) +
geom_bar()+
geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.25) +
labs(y = "Number of Passengers",
title = "Survival Rates")
#Tabelle
(survivalrate <- table(data$Survived))
#Survival rate vs class
ggplot(data, aes(x = Pclass, fill = Survived)) +
geom_bar() +
labs(y = "Number of Passengers",
x = "Passenger class",
title = "Survival Rates vs Class")
#Tabelle
(s_vs_class <- addmargins(table(data$Survived,data$Pclass)))
(prop_s_vs_class <- round(addmargins(prop.table(table(data$Survived,data$Pclass))), 4) * 100)
#Survival rate vs Sex
ggplot(data, aes(x = Sex, fill = Survived,label = scales::percent(prop.table(stat(count))))) +
geom_bar() +
geom_text(stat = 'count',
vjust = -0.4,
size = 3) +
labs(y = "Number of Passengers",
title = "Survival Rates vs Sex")
#Tabelle
(s_vs_sex <- addmargins(table(data$Survived,data$Sex)))
(prop_s_vs_sex <- round(addmargins(prop.table(table(data$Survived,data$Sex))), 4) * 100)
#Survival rate vs age
ggplot(data, aes(x = Age, fill = Survived)) +
geom_histogram(binwidth = 10) +
labs(y = "Number of Passengers",
x = "Age (binwidth = 10)",
title = "Survival Rates vs Age")
ggplot(data, aes(x = Age, fill = Survived)) +
geom_density(alpha= 0.7) +
labs(y = "Number of Passengers",
x = "Age",
title = "Survival Rates vs Age")
ggplot(data, aes(x = Survived, y = Age)) +
geom_boxplot() +
labs(y = "Age",
x = "Survived",
title = "Survival Rates vs Age")
#Tabelle
(s_vs_age <- addmargins(table(data$Survived,data$Age)))
(prop_s_vs_age <- round(addmargins(prop.table(table(data$Survived,data$Age))), 4) * 100)
#Survival rate vs Number of Siblings/Spouses Aboard
ggplot(data, aes(x = SibSp, fill = Survived)) +
geom_bar()+
labs(y = "Number of Passengers",
x = "Number of Siblings/Spouses Aboard",
title = "Survival Rates vs Number of Siblings/Spouses Aboard")
#Tabelle
(s_vs_sibsp <- addmargins(table(data$Survived,data$SibSp)))
(prop_s_vs_sibsp <- round(addmargins(prop.table(table(data$Survived,data$SibSp))), 4) * 100)
ggplot(data, aes(x = Parch, fill = Survived)) +
geom_bar()+
labs(y = "Number of Passengers",
x = "Number of Parents/Children Aboard",
title = "Survival Rates vs Number of Siblings/Spouses Aboard")
#Mit prozent
ggplot(data, aes(x = Parch, fill = Survived,label = scales::percent(prop.table(stat(count))))) +
geom_bar()+
geom_text(stat = 'count',
vjust = -0.6,
size = 3) +
labs(y = "Number of Passengers",
x = "Number of Parents/Children Aboard",
title = "Survival Rates vs Number of Siblings/Spouses Aboard")
#Tabelle
(s_vs_parch <- addmargins(table(data$Survived,data$Parch)))
(prop_s_vs_parch <- round(addmargins(prop.table(table(data$Survived,data$Parch))), 4) * 100)
#Survival rate vs Fare
ggplot(data, aes(x = Fare, fill = Survived)) +
geom_histogram(binwidth = 10) +
labs(y = "Number of Passengers",
x = "Fare (binwidth = 10)",
title = "Survival Rates vs Fare")
